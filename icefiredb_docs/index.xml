<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>IceFireDB - Building global database infrastructure on IceFireDB Documentation</title><link>https://docs.icefiredb.xyz/icefiredb_docs/</link><description>Recent content in IceFireDB - Building global database infrastructure on IceFireDB Documentation</description><generator>Hugo</generator><language>en</language><atom:link href="https://docs.icefiredb.xyz/icefiredb_docs/index.xml" rel="self" type="application/rss+xml"/><item><title>icefiredb-crdt-kv</title><link>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/develop/icefiredb-crdt-kv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/develop/icefiredb-crdt-kv/</guid><description>&lt;h1 id="icefiredb-crdt-kv">
 icefiredb-crdt-kv
 &lt;a class="anchor" href="#icefiredb-crdt-kv">#&lt;/a>
&lt;/h1>
&lt;h2 id="project-introduction">
 Project introduction
 &lt;a class="anchor" href="#project-introduction">#&lt;/a>
&lt;/h2>
&lt;p>The IceFireDB-CRDT-KV engine can support decentralized P2P networking, data synchronization and consistency between nodes. It is a component of the IceFireDB software ecosystem, thanks to the open source of IPFS.&lt;/p>
&lt;h2 id="features">
 Features
 &lt;a class="anchor" href="#features">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>Easy access to P2P data consistency function&lt;/li>
&lt;li>Stable decentralized networking function&lt;/li>
&lt;li>Friendly program access interface&lt;/li>
&lt;/ol>
&lt;h2 id="installing">
 Installing
 &lt;a class="anchor" href="#installing">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">get&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">u&lt;/span> &lt;span style="color:#a6e22e">github&lt;/span>.&lt;span style="color:#a6e22e">com&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">IceFireDB&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">icefiredb&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">crdt&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">kv&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="example">
 Example
 &lt;a class="anchor" href="#example">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#e6db74">&amp;#34;bufio&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#e6db74">&amp;#34;context&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">icefiredb_crdt_kv&lt;/span> &lt;span style="color:#e6db74">&amp;#34;github.com/IceFireDB/icefiredb-crdt-kv/kv&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">badger2&lt;/span> &lt;span style="color:#e6db74">&amp;#34;github.com/dgraph-io/badger&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#e6db74">&amp;#34;github.com/ipfs/go-datastore/query&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#e6db74">&amp;#34;github.com/sirupsen/logrus&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#e6db74">&amp;#34;os&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#e6db74">&amp;#34;strings&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">TODO&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">log&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">logrus&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">db&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">icefiredb_crdt_kv&lt;/span>.&lt;span style="color:#a6e22e">NewCRDTKeyValueDB&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">icefiredb_crdt_kv&lt;/span>.&lt;span style="color:#a6e22e">Config&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">NodeServiceName&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;icefiredb-crdt-kv&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">DataSyncChannel&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;icefiredb-crdt-kv-data&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">NetDiscoveryChannel&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;icefiredb-crdt-kv-net&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">Namespace&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;test&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">Logger&lt;/span>: &lt;span style="color:#a6e22e">log&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		panic(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;&amp;gt; &amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">scanner&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">bufio&lt;/span>.&lt;span style="color:#a6e22e">NewScanner&lt;/span>(&lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Stdin&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">scanner&lt;/span>.&lt;span style="color:#a6e22e">Scan&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">text&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">scanner&lt;/span>.&lt;span style="color:#a6e22e">Text&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">fields&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">Fields&lt;/span>(&lt;span style="color:#a6e22e">text&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">fields&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;&amp;gt; &amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">cmd&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">fields&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">switch&lt;/span> &lt;span style="color:#a6e22e">cmd&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#34;exit&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;quit&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#34;get&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">fields&lt;/span>) &amp;lt; &lt;span style="color:#ae81ff">2&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#a6e22e">printVal&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;missing key&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#a6e22e">val&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, []byte(&lt;span style="color:#a6e22e">fields&lt;/span>[&lt;span style="color:#ae81ff">1&lt;/span>]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#a6e22e">printVal&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#a6e22e">printVal&lt;/span>(string(&lt;span style="color:#a6e22e">val&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#34;put&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">fields&lt;/span>) &amp;lt; &lt;span style="color:#ae81ff">3&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#a6e22e">printVal&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Missing parameters&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#a6e22e">printVal&lt;/span>(&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Put&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, []byte(&lt;span style="color:#a6e22e">fields&lt;/span>[&lt;span style="color:#ae81ff">1&lt;/span>]), []byte(&lt;span style="color:#a6e22e">fields&lt;/span>[&lt;span style="color:#ae81ff">2&lt;/span>])))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#34;delete&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">fields&lt;/span>) &amp;lt; &lt;span style="color:#ae81ff">2&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#a6e22e">printVal&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;missing key&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#a6e22e">printVal&lt;/span>(&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Delete&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, []byte(&lt;span style="color:#a6e22e">fields&lt;/span>[&lt;span style="color:#ae81ff">1&lt;/span>])))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#34;has&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">fields&lt;/span>) &amp;lt; &lt;span style="color:#ae81ff">2&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#a6e22e">printVal&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;missing key&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#a6e22e">is&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Has&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, []byte(&lt;span style="color:#a6e22e">fields&lt;/span>[&lt;span style="color:#ae81ff">1&lt;/span>]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#a6e22e">printVal&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#a6e22e">printVal&lt;/span>(&lt;span style="color:#a6e22e">is&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#34;list&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#a6e22e">result&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Query&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">query&lt;/span>.&lt;span style="color:#a6e22e">Query&lt;/span>{})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#a6e22e">printVal&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">val&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Sprintf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%s =&amp;gt; %v\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">val&lt;/span>.&lt;span style="color:#a6e22e">Key&lt;/span>, string(&lt;span style="color:#a6e22e">val&lt;/span>.&lt;span style="color:#a6e22e">Value&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Print&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;&amp;gt; &amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#34;query&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">fields&lt;/span>) &amp;lt; &lt;span style="color:#ae81ff">2&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#a6e22e">printVal&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;missing query condition&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#75715e">//fmt.Println(fields[1], len(fields[1]))
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>			&lt;span style="color:#a6e22e">q&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">query&lt;/span>.&lt;span style="color:#a6e22e">Query&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#75715e">//Prefix: fields[1],
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>				&lt;span style="color:#a6e22e">Filters&lt;/span>: []&lt;span style="color:#a6e22e">query&lt;/span>.&lt;span style="color:#a6e22e">Filter&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>					&lt;span style="color:#a6e22e">query&lt;/span>.&lt;span style="color:#a6e22e">FilterKeyPrefix&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>						&lt;span style="color:#a6e22e">Prefix&lt;/span>: &lt;span style="color:#a6e22e">fields&lt;/span>[&lt;span style="color:#ae81ff">1&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>					},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#a6e22e">result&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Query&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">q&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#a6e22e">printVal&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#75715e">//time.Sleep(time.Second)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>			&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">val&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Sprintf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%s =&amp;gt; %v\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">val&lt;/span>.&lt;span style="color:#a6e22e">Key&lt;/span>, string(&lt;span style="color:#a6e22e">val&lt;/span>.&lt;span style="color:#a6e22e">Value&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Print&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;&amp;gt; &amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#34;connect&amp;#34;&lt;/span>: &lt;span style="color:#75715e">// 主动连接
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>			&lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">fields&lt;/span>) &amp;lt; &lt;span style="color:#ae81ff">2&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#a6e22e">printVal&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Missing connection address&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Connect&lt;/span>(&lt;span style="color:#a6e22e">fields&lt;/span>[&lt;span style="color:#ae81ff">1&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#a6e22e">printVal&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;connection succeeded!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#a6e22e">printVal&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#34;slist&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#a6e22e">result&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Store&lt;/span>().&lt;span style="color:#a6e22e">Query&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">query&lt;/span>.&lt;span style="color:#a6e22e">Query&lt;/span>{})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#a6e22e">printVal&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">val&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Sprintf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%s =&amp;gt; %v\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">val&lt;/span>.&lt;span style="color:#a6e22e">Key&lt;/span>, string(&lt;span style="color:#a6e22e">val&lt;/span>.&lt;span style="color:#a6e22e">Value&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Print&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;&amp;gt; &amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#34;bquery&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">fields&lt;/span>) &amp;lt; &lt;span style="color:#ae81ff">2&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#a6e22e">printVal&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;missing query condition&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">DB&lt;/span>().&lt;span style="color:#a6e22e">View&lt;/span>(&lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">txn&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">badger2&lt;/span>.&lt;span style="color:#a6e22e">Txn&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#a6e22e">opts&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">badger2&lt;/span>.&lt;span style="color:#a6e22e">DefaultIteratorOptions&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#a6e22e">opts&lt;/span>.&lt;span style="color:#a6e22e">PrefetchSize&lt;/span> = &lt;span style="color:#ae81ff">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#a6e22e">it&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">txn&lt;/span>.&lt;span style="color:#a6e22e">NewIterator&lt;/span>(&lt;span style="color:#a6e22e">opts&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">it&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#a6e22e">prefix&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []byte(&lt;span style="color:#a6e22e">fields&lt;/span>[&lt;span style="color:#ae81ff">1&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">it&lt;/span>.&lt;span style="color:#a6e22e">Seek&lt;/span>(&lt;span style="color:#a6e22e">prefix&lt;/span>); &lt;span style="color:#a6e22e">it&lt;/span>.&lt;span style="color:#a6e22e">ValidForPrefix&lt;/span>(&lt;span style="color:#a6e22e">prefix&lt;/span>); &lt;span style="color:#a6e22e">it&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>					&lt;span style="color:#a6e22e">item&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">it&lt;/span>.&lt;span style="color:#a6e22e">Item&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>					&lt;span style="color:#a6e22e">k&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">item&lt;/span>.&lt;span style="color:#a6e22e">Key&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>					&lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">item&lt;/span>.&lt;span style="color:#a6e22e">Value&lt;/span>(&lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">v&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>						&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;key=%s, value=%s\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">k&lt;/span>, &lt;span style="color:#a6e22e">v&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>						&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>					})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>					&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>						&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>					}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#34;blist&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">DB&lt;/span>().&lt;span style="color:#a6e22e">View&lt;/span>(&lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">txn&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">badger2&lt;/span>.&lt;span style="color:#a6e22e">Txn&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#a6e22e">opts&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">badger2&lt;/span>.&lt;span style="color:#a6e22e">DefaultIteratorOptions&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#a6e22e">opts&lt;/span>.&lt;span style="color:#a6e22e">PrefetchSize&lt;/span> = &lt;span style="color:#ae81ff">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#a6e22e">it&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">txn&lt;/span>.&lt;span style="color:#a6e22e">NewIterator&lt;/span>(&lt;span style="color:#a6e22e">opts&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">it&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">it&lt;/span>.&lt;span style="color:#a6e22e">Rewind&lt;/span>(); &lt;span style="color:#a6e22e">it&lt;/span>.&lt;span style="color:#a6e22e">Valid&lt;/span>(); &lt;span style="color:#a6e22e">it&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>					&lt;span style="color:#a6e22e">item&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">it&lt;/span>.&lt;span style="color:#a6e22e">Item&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>					&lt;span style="color:#a6e22e">k&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">item&lt;/span>.&lt;span style="color:#a6e22e">Key&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>					&lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">item&lt;/span>.&lt;span style="color:#a6e22e">Value&lt;/span>(&lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">v&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>						&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;key=%s, value=%s\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">k&lt;/span>, &lt;span style="color:#a6e22e">v&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>						&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>					})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>					&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>						&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>					}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#a6e22e">printVal&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">printVal&lt;/span>(&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%v\n&amp;gt; &amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">v&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="roadmap">
 RoadMap
 &lt;a class="anchor" href="#roadmap">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>Optimize project structure.&lt;/li>
&lt;li>Encapsulates the kv engine layer for easy reference by upper-layer applications.&lt;/li>
&lt;/ol></description></item><item><title>OrbitDB</title><link>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/project-comparison/orbitdb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/project-comparison/orbitdb/</guid><description>&lt;h2 id="compared-with-orbitdb">
 Compared with OrbitDB
 &lt;a class="anchor" href="#compared-with-orbitdb">#&lt;/a>
&lt;/h2>
&lt;p>&lt;strong>OrbitDB is a serverless, distributed, peer-to-peer database.&lt;/strong>&lt;/p>
&lt;p>OrbitDB uses IPFS as its data storage and IPFS Pubsub and uses CRDTs to automatically sync databases with peers, achieving strong eventual consistency - when all updates are eventually received, all nodes will have the same state.&lt;/p>
&lt;p>&lt;strong>IceFireDB is a database built for web3 and web2,The core mission of the project is to help applications quickly achieve decentralization,built for Data dao.&lt;/strong>&lt;/p></description></item><item><title>Overview</title><link>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/designs/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/designs/overview/</guid><description>&lt;h1 id="icefiredb-nosql-engine-overview">
 IceFireDB NoSQL Engine Overview
 &lt;a class="anchor" href="#icefiredb-nosql-engine-overview">#&lt;/a>
&lt;/h1>
&lt;h2 id="introduction">
 Introduction
 &lt;a class="anchor" href="#introduction">#&lt;/a>
&lt;/h2>
&lt;p>IceFireDB is a decentralized database infrastructure that combines cutting-edge research in distributed systems, concurrent databases, and peer-to-peer networking. The NoSQL engine provides a high-performance, decentralized key-value store with support for multiple storage backends and distributed consensus mechanisms.&lt;/p>
&lt;h2 id="core-architecture">
 Core Architecture
 &lt;a class="anchor" href="#core-architecture">#&lt;/a>
&lt;/h2>
&lt;h3 id="system-components">
 System Components
 &lt;a class="anchor" href="#system-components">#&lt;/a>
&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">Component&lt;/th>
 &lt;th style="text-align: left">Description&lt;/th>
 &lt;th style="text-align: left">Technologies&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">&lt;strong>Network Layer&lt;/strong>&lt;/td>
 &lt;td style="text-align: left">Manages node communication and data synchronization&lt;/td>
 &lt;td style="text-align: left">RAFT, P2P, NATS&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">&lt;strong>Storage Layer&lt;/strong>&lt;/td>
 &lt;td style="text-align: left">Pluggable storage backends with unified interface&lt;/td>
 &lt;td style="text-align: left">LevelDB, BadgerDB, IPFS, CRDT, OSS&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">&lt;strong>Protocol Layer&lt;/strong>&lt;/td>
 &lt;td style="text-align: left">Client communication protocols&lt;/td>
 &lt;td style="text-align: left">RESP (Redis), MySQL, GraphQL (planned)&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">&lt;strong>Codec Layer&lt;/strong>&lt;/td>
 &lt;td style="text-align: left">Data encoding/decoding and operation abstraction&lt;/td>
 &lt;td style="text-align: left">KV, Strings, Hashes, Lists, Sets, Sorted Sets&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h3 id="storage-drivers">
 Storage Drivers
 &lt;a class="anchor" href="#storage-drivers">#&lt;/a>
&lt;/h3>
&lt;p>IceFireDB supports multiple storage backends through a unified driver interface:&lt;/p></description></item><item><title>Overview</title><link>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-pubsub/architecture/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-pubsub/architecture/overview/</guid><description>&lt;h1 id="architecture-overview">
 Architecture Overview
 &lt;a class="anchor" href="#architecture-overview">#&lt;/a>
&lt;/h1>
&lt;h2 id="system-architecture">
 System Architecture
 &lt;a class="anchor" href="#system-architecture">#&lt;/a>
&lt;/h2>
&lt;p>IceFireDB-PubSub is designed as a decentralized publish-subscribe system that maintains compatibility with the Redis PubSub protocol while leveraging P2P networking for decentralized message distribution. The architecture consists of several key components:&lt;/p>
&lt;h3 id="core-components">
 Core Components
 &lt;a class="anchor" href="#core-components">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Redis Protocol Handler&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Listens on configured port (default: 16379)&lt;/li>
&lt;li>Parses Redis protocol (RESP) requests&lt;/li>
&lt;li>Handles PubSub-specific commands (SUBSCRIBE, PUBLISH, etc.)&lt;/li>
&lt;li>Manages client connections and subscription state&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Subscription Manager&lt;/strong>&lt;/p></description></item><item><title>Overview</title><link>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-redis-proxy/architecture/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-redis-proxy/architecture/overview/</guid><description>&lt;h1 id="architecture-overview">
 Architecture Overview
 &lt;a class="anchor" href="#architecture-overview">#&lt;/a>
&lt;/h1>
&lt;h2 id="system-architecture">
 System Architecture
 &lt;a class="anchor" href="#system-architecture">#&lt;/a>
&lt;/h2>
&lt;p>IceFireDB-Redis-Proxy is designed as a decentralized proxy layer that enhances traditional Redis deployments with P2P networking capabilities. The architecture consists of several key components:&lt;/p>
&lt;h3 id="core-components">
 Core Components
 &lt;a class="anchor" href="#core-components">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Redis Protocol Handler&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Listens on configured port (default: 16379)&lt;/li>
&lt;li>Parses Redis protocol (RESP) requests&lt;/li>
&lt;li>Handles authentication and connection management&lt;/li>
&lt;li>Routes commands to appropriate backend Redis servers&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Backend Redis Connector&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Manages connections to backend Redis servers (standalone or cluster)&lt;/li>
&lt;li>Handles connection pooling and failover&lt;/li>
&lt;li>Supports both single-node and cluster Redis deployments&lt;/li>
&lt;li>Implements read-write separation and load balancing&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>P2P Networking Layer&lt;/strong>&lt;/p></description></item><item><title>Overview</title><link>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-sqlite/architecture/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-sqlite/architecture/overview/</guid><description>&lt;h1 id="architecture-overview">
 Architecture Overview
 &lt;a class="anchor" href="#architecture-overview">#&lt;/a>
&lt;/h1>
&lt;h2 id="system-architecture">
 System Architecture
 &lt;a class="anchor" href="#system-architecture">#&lt;/a>
&lt;/h2>
&lt;p>IceFireDB-SQLite is designed as a decentralized SQL database system that combines traditional SQLite storage with peer-to-peer networking capabilities. The architecture consists of several key components:&lt;/p>
&lt;h3 id="core-components">
 Core Components
 &lt;a class="anchor" href="#core-components">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>MySQL Protocol Handler&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Listens on configured port (default: 23306)&lt;/li>
&lt;li>Parses MySQL wire protocol requests&lt;/li>
&lt;li>Handles authentication and connection management&lt;/li>
&lt;li>Translates SQL commands to SQLite operations&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>SQLite Storage Engine&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Local SQLite database file storage&lt;/li>
&lt;li>Transaction management and query execution&lt;/li>
&lt;li>Data persistence and integrity maintenance&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>P2P Networking Layer&lt;/strong>&lt;/p></description></item><item><title>Overview</title><link>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-sqlproxy/architecture/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-sqlproxy/architecture/overview/</guid><description>&lt;h1 id="architecture-overview">
 Architecture Overview
 &lt;a class="anchor" href="#architecture-overview">#&lt;/a>
&lt;/h1>
&lt;h2 id="system-architecture">
 System Architecture
 &lt;a class="anchor" href="#system-architecture">#&lt;/a>
&lt;/h2>
&lt;p>IceFireDB-SQLProxy is designed as a decentralized proxy layer that enhances traditional MySQL deployments with P2P networking capabilities. The architecture consists of several key components that work together to provide decentralized SQL database functionality.&lt;/p>
&lt;h3 id="core-components">
 Core Components
 &lt;a class="anchor" href="#core-components">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>MySQL Protocol Handler&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Listens on configured port (default: 33306)&lt;/li>
&lt;li>Parses MySQL wire protocol requests&lt;/li>
&lt;li>Handles authentication and connection management&lt;/li>
&lt;li>Manages client connections and session state&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Backend MySQL Connector&lt;/strong>&lt;/p></description></item><item><title>Getting Started Tutorial</title><link>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/tutorials/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/tutorials/getting-started/</guid><description>&lt;h1 id="getting-started-with-icefiredb">
 Getting Started with IceFireDB
 &lt;a class="anchor" href="#getting-started-with-icefiredb">#&lt;/a>
&lt;/h1>
&lt;h2 id="introduction">
 Introduction
 &lt;a class="anchor" href="#introduction">#&lt;/a>
&lt;/h2>
&lt;p>This tutorial will guide you through setting up and using IceFireDB for the first time. We&amp;rsquo;ll cover installation, basic operations, and some advanced features.&lt;/p>
&lt;h2 id="prerequisites">
 Prerequisites
 &lt;a class="anchor" href="#prerequisites">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Go 1.18+ installed&lt;/li>
&lt;li>Basic understanding of Redis commands&lt;/li>
&lt;li>Terminal/shell access&lt;/li>
&lt;/ul>
&lt;h2 id="installation">
 Installation
 &lt;a class="anchor" href="#installation">#&lt;/a>
&lt;/h2>
&lt;h3 id="method-1-from-source">
 Method 1: From Source
 &lt;a class="anchor" href="#method-1-from-source">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Clone the repository&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git clone https://github.com/IceFireDB/IceFireDB.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd IceFireDB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Build the project&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>make build
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># The binary will be in the bin/ directory&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ls bin/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="method-2-using-docker">
 Method 2: Using Docker
 &lt;a class="anchor" href="#method-2-using-docker">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Pull the Docker image&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker pull icefiredb/icefiredb:latest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Run the container&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker run -d -p 11001:11001 --name icefiredb icefiredb/icefiredb:latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="method-3-pre-built-binaries">
 Method 3: Pre-built Binaries
 &lt;a class="anchor" href="#method-3-pre-built-binaries">#&lt;/a>
&lt;/h3>
&lt;p>Download the latest release from the &lt;a href="https://github.com/IceFireDB/IceFireDB/releases">GitHub releases page&lt;/a>.&lt;/p></description></item><item><title>icefiredb-ipfs-log</title><link>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/develop/icefiredb-ipfs-log/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/develop/icefiredb-ipfs-log/</guid><description>&lt;h1 id="icefiredb-ipfs-log">
 icefiredb-ipfs-log
 &lt;a class="anchor" href="#icefiredb-ipfs-log">#&lt;/a>
&lt;/h1>
&lt;h2 id="project-introduction">
 Project introduction
 &lt;a class="anchor" href="#project-introduction">#&lt;/a>
&lt;/h2>
&lt;p>icefiredb-ipfs-log is a distributed immutable, operation-based conflict-free replication data structure that relies on ipfs to store data and merges each peer node data based on pubsub conflict-free. You can easily implement custom data structures such as kv, event, nosql, etc. based on icefiredb-ipfs-log.&lt;/p>
&lt;p>&lt;strong>Conflict-free log replication model&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span> Log A Log B
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> logA.append&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;one&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span> logB.append&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v v
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> +-----+ +-------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |&lt;span style="color:#e6db74">&amp;#34;one&amp;#34;&lt;/span>| |&lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span>|
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> +-----+ +-------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> logA.append&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;two&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span> logB.append&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;world&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v v
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> +-----------+ +---------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |&lt;span style="color:#e6db74">&amp;#34;one&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;two&amp;#34;&lt;/span>| |&lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;world&amp;#34;&lt;/span>|
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> +-----------+ +---------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> logA.join&lt;span style="color:#f92672">(&lt;/span>logB&lt;span style="color:#f92672">)&lt;/span> &amp;lt;----------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+---------------------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|&lt;span style="color:#e6db74">&amp;#34;one&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;two&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;world&amp;#34;&lt;/span>|
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+---------------------------+
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="features">
 Features
 &lt;a class="anchor" href="#features">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>Easy access to P2P &amp;amp;&amp;amp; ipfs-log data consistency function&lt;/li>
&lt;li>Stable decentralized networking function&lt;/li>
&lt;li>Friendly program access interface&lt;/li>
&lt;/ol>
&lt;h2 id="installing">
 Installing
 &lt;a class="anchor" href="#installing">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">get&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">u&lt;/span> &lt;span style="color:#a6e22e">github&lt;/span>.&lt;span style="color:#a6e22e">com&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">IceFireDB&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">icefiredb&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">ipfs&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">log&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="example">
 Example
 &lt;a class="anchor" href="#example">#&lt;/a>
&lt;/h2>
&lt;h3 id="example-of-building-a-key-value-database-using-icefiredb-ipfs-log">
 Example of building a key-value database using icefiredb-ipfs-log
 &lt;a class="anchor" href="#example-of-building-a-key-value-database-using-icefiredb-ipfs-log">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>memory key-value：&lt;a href="https://github.com/IceFireDB/icefiredb-ipfs-log/blob/main/stores/kv/db.go">memory-kv&lt;/a>&lt;/li>
&lt;li>leveldb kv ：&lt;a href="https://github.com/IceFireDB/icefiredb-ipfs-log/blob/main/stores/levelkv/db.go">leveldb-kv&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="use-of-key-value-databases">
 Use of key-value databases
 &lt;a class="anchor" href="#use-of-key-value-databases">#&lt;/a>
&lt;/h3>
&lt;p>&lt;a href="https://github.com/IceFireDB/icefiredb-ipfs-log/tree/main/example">Detailed usage example reference&lt;/a>&lt;/p></description></item><item><title>NetWork</title><link>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-pubsub/architecture/network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-pubsub/architecture/network/</guid><description>&lt;h1 id="network-details">
 NetWork Details
 &lt;a class="anchor" href="#network-details">#&lt;/a>
&lt;/h1></description></item><item><title>NetWork</title><link>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-redis-proxy/architecture/network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-redis-proxy/architecture/network/</guid><description>&lt;h1 id="network-details">
 NetWork Details
 &lt;a class="anchor" href="#network-details">#&lt;/a>
&lt;/h1></description></item><item><title>NetWork</title><link>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-sqlite/architecture/network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-sqlite/architecture/network/</guid><description>&lt;h1 id="network-details">
 NetWork Details
 &lt;a class="anchor" href="#network-details">#&lt;/a>
&lt;/h1></description></item><item><title>NetWork</title><link>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-sqlproxy/architecture/network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-sqlproxy/architecture/network/</guid><description>&lt;h1 id="network-details">
 NetWork Details
 &lt;a class="anchor" href="#network-details">#&lt;/a>
&lt;/h1></description></item><item><title>Network layer</title><link>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/designs/network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/designs/network/</guid><description>&lt;h1 id="network-layer-design">
 Network layer design
 &lt;a class="anchor" href="#network-layer-design">#&lt;/a>
&lt;/h1>
&lt;p>The network layer undertakes the work of inter-node networking, inter-node data distribution, and inter-node data consistency consensus. The network layer of IceFireDB is divided into two layers according to the distance of the physical network link:&lt;/p>
&lt;ol>
&lt;li>Data consistency network layer for short-distance networks.&lt;/li>
&lt;li>Decentralized database network layer for wide-distance network.&lt;/li>
&lt;/ol>
&lt;p>The above two different network layers are supported by different technologies and have different requirements for data consistency sensitivity and timeliness.&lt;/p></description></item><item><title>ThreadDB</title><link>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/project-comparison/threaddb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/project-comparison/threaddb/</guid><description>&lt;h2 id="compared-with-threaddb">
 Compared with ThreadDB
 &lt;a class="anchor" href="#compared-with-threaddb">#&lt;/a>
&lt;/h2>
&lt;p>&lt;strong>ThreadDB is a serverless, distributed, peer-to-peer database.&lt;/strong>&lt;/p>
&lt;p>&lt;strong>IceFireDB is a database built for web3 and web2,The core mission of the project is to help applications quickly achieve decentralization,built for Data dao.&lt;/strong>&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">Database&lt;/th>
 &lt;th style="text-align: left">ThreadDB&lt;/th>
 &lt;th style="text-align: left">IceFireDB&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">system target&lt;/td>
 &lt;td style="text-align: left">P2P Databases&lt;/td>
 &lt;td style="text-align: left">A decentralized database platform built for Data dao.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">storage engine support&lt;/td>
 &lt;td style="text-align: left">IPFS&lt;/td>
 &lt;td style="text-align: left">goleveldb、badger、IPFS、CRDT、IPFS-LOG、OSS&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">network support type&lt;/td>
 &lt;td style="text-align: left">P2P&lt;/td>
 &lt;td style="text-align: left">P2P、RAFT、NATS&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">Data type support&lt;/td>
 &lt;td style="text-align: left">SQL&lt;/td>
 &lt;td style="text-align: left">KV、Strings、Hashes、Lists、Sorted Sets、Sets、SQL、PubSub&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">Software integration method&lt;/td>
 &lt;td style="text-align: left">Binary software integration&lt;/td>
 &lt;td style="text-align: left">Software library integration, binary software integration、web3 platform integration&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">web3 support&lt;/td>
 &lt;td style="text-align: left">No smart contract plan&lt;/td>
 &lt;td style="text-align: left">Smart contracts are being supported、Build data dao database platform&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">computer language used to implement&lt;/td>
 &lt;td style="text-align: left">Go&lt;/td>
 &lt;td style="text-align: left">Go&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">Ecological client language&lt;/td>
 &lt;td style="text-align: left">Go&lt;/td>
 &lt;td style="text-align: left">Any client that supports the redis、mysql protocol&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="thanks-threaddb">
 Thanks ThreadDB
 &lt;a class="anchor" href="#thanks-threaddb">#&lt;/a>
&lt;/h2>
&lt;p>Thanks to ThreadDB for letting us see the excellent implementation of decentralized SQL database.&lt;/p></description></item><item><title>icefiredb-proxy</title><link>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/develop/icefiredb_proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/develop/icefiredb_proxy/</guid><description>&lt;h1 id="icefiredb-proxy">
 IceFireDB-Proxy
 &lt;a class="anchor" href="#icefiredb-proxy">#&lt;/a>
&lt;/h1>
&lt;h2 id="project-introduction">
 Project introduction
 &lt;a class="anchor" href="#project-introduction">#&lt;/a>
&lt;/h2>
&lt;p>IceFireDB-Proxy is a high-performance, high-availability, and user-friendly Resp protocol cluster proxy solution. It is supporting P2P networking and is a network component in the IceFireDB ecosystem.&lt;/p>
&lt;h2 id="features">
 Features
 &lt;a class="anchor" href="#features">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>Complete data source mode support: stand-alone, cluster mode&lt;/li>
&lt;li>Rich command support&lt;/li>
&lt;li>Excellent cluster state management and failover&lt;/li>
&lt;li>Excellent traffic control policies: Traffic read/write separation and multi-tenant data isolation&lt;/li>
&lt;li>Excellent command telemetry features&lt;/li>
&lt;li>Bottom-fishing use of mind and base abilities that are closer to cloud native&lt;/li>
&lt;li>Supports P2P automatic networking, and Proxy helps traditional Redis databases achieve data decentralization.&lt;/li>
&lt;li>New framework for faster network, will be upgraded soon. &lt;a href="https://github.com/IceFireDB/redhub">redhub&lt;/a>&lt;/li>
&lt;/ol>
&lt;h2 id="architecture">
 Architecture
 &lt;a class="anchor" href="#architecture">#&lt;/a>
&lt;/h2>
&lt;center>
&lt;img width="550" alt="image" src="https://res.cloudinary.com/malloc/image/upload/v1669104023/icefiredb/docs/comp-archotecture_wwj4id.png">
&lt;/center>
&lt;h2 id="network-communication-model">
 Network Communication Model
 &lt;a class="anchor" href="#network-communication-model">#&lt;/a>
&lt;/h2>
&lt;center>
&lt;img width="550" alt="image" src="https://res.cloudinary.com/malloc/image/upload/v1669104116/icefiredb/docs/usage-architecture_t42qov.png">
&lt;/center>
&lt;h2 id="installing">
 Installing
 &lt;a class="anchor" href="#installing">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>1. Install Go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2. git clone https://github.com/IceFireDB/IceFireDB-Proxy.git $GOPATH/src/github.com/IceFireDB/IceFireDB-Proxy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>3. cd $GOPATH/src/github.com/IceFireDB/IceFireDB-Proxy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>4. make
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="usage">
 Usage
 &lt;a class="anchor" href="#usage">#&lt;/a>
&lt;/h2>
&lt;p>Run a binary file directly, if you need to run in the background can be added to the systemd system management&lt;/p></description></item><item><title>Storage</title><link>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-pubsub/architecture/storage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-pubsub/architecture/storage/</guid><description>&lt;h1 id="storage-engine-details">
 Storage Engine Details
 &lt;a class="anchor" href="#storage-engine-details">#&lt;/a>
&lt;/h1></description></item><item><title>Storage</title><link>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-redis-proxy/architecture/storage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-redis-proxy/architecture/storage/</guid><description>&lt;h1 id="storage-engine-details">
 Storage Engine Details
 &lt;a class="anchor" href="#storage-engine-details">#&lt;/a>
&lt;/h1></description></item><item><title>Storage</title><link>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-sqlite/architecture/storage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-sqlite/architecture/storage/</guid><description>&lt;h1 id="storage-engine-details">
 Storage Engine Details
 &lt;a class="anchor" href="#storage-engine-details">#&lt;/a>
&lt;/h1></description></item><item><title>Storage</title><link>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-sqlproxy/architecture/storage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-sqlproxy/architecture/storage/</guid><description>&lt;h1 id="storage-engine-details">
 Storage Engine Details
 &lt;a class="anchor" href="#storage-engine-details">#&lt;/a>
&lt;/h1></description></item><item><title>Storage layer</title><link>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/designs/storage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/designs/storage/</guid><description>&lt;h1 id="storage-layer-design">
 Storage layer design
 &lt;a class="anchor" href="#storage-layer-design">#&lt;/a>
&lt;/h1>
&lt;p>The storage layer is responsible for data storage, and the data storage here includes different storage media of web2 and web3. For web2, the storage media we face includes disk, OSS, and for web3, the storage media we face includes IPFS, blockchain, and smart contracts.Currently, the storage types supported by IceFireDB mainly include the following.&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">Engine type&lt;/th>
 &lt;th style="text-align: left">describe&lt;/th>
 &lt;th style="text-align: left">Driver directory&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">LevelDB&lt;/td>
 &lt;td style="text-align: left">LevelDB is a fast key-value storage library written at Google that provides an ordered mapping from string keys to string values.&lt;/td>
 &lt;td style="text-align: left">Default&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">Badger&lt;/td>
 &lt;td style="text-align: left">BadgerDB is an embeddable, persistent and fast key-value (KV) database written in pure Go.&lt;/td>
 &lt;td style="text-align: left">&lt;a href="https://github.com/IceFireDB/IceFireDB/tree/main/driver/badger">Badger&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">OSS&lt;/td>
 &lt;td style="text-align: left">Object storage is a technology that stores and manages data in an unstructured format called objects.&lt;/td>
 &lt;td style="text-align: left">&lt;a href="https://github.com/IceFireDB/IceFireDB/tree/main/driver/oss">OSS&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">IPFS&lt;/td>
 &lt;td style="text-align: left">IPFS (the InterPlanetary File System) is a hypermedia distribution protocol addressed by content and identities. It enables the creation of completely distributed applications, and in doing so aims to make the web faster, safer, and more open.&lt;/td>
 &lt;td style="text-align: left">&lt;a href="https://github.com/IceFireDB/IceFireDB/tree/main/driver/ipfs">IPFS&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">CRDT-KV&lt;/td>
 &lt;td style="text-align: left">The IceFireDB-CRDT-KV engine can support decentralized P2P networking, data synchronization and consistency between nodes. It is a component of the IceFireDB software ecosystem, thanks to the open source of IPFS.&lt;/td>
 &lt;td style="text-align: left">&lt;a href="https://github.com/IceFireDB/IceFireDB/tree/main/driver/crdt">CRDT-KV&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">IPFS-LOG&lt;/td>
 &lt;td style="text-align: left">icefiredb-ipfs-log is a distributed immutable, operation-based conflict-free replication data structure that relies on ipfs to store data and merges each peer node data based on pubsub conflict-free. You can easily implement custom data structures such as kv, event, nosql, etc. based on icefiredb-ipfs-log.&lt;/td>
 &lt;td style="text-align: left">&lt;a href="https://github.com/IceFireDB/IceFireDB/tree/main/driver/ipfs-log">IPFS-LOG&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">OrbitDB&lt;/td>
 &lt;td style="text-align: left">OrbitDB is a serverless, distributed, peer-to-peer database. OrbitDB uses IPFS as its data storage and IPFS Pubsub to automatically sync databases with peers.&lt;/td>
 &lt;td style="text-align: left">&lt;a href="https://github.com/IceFireDB/IceFireDB/tree/main/driver/orbitdb">OrbitDB&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="storage-model">
 Storage model
 &lt;a class="anchor" href="#storage-model">#&lt;/a>
&lt;/h2>
&lt;p>The NoSQL storage layer of each individual IceGiant mainly includes the codec layer and the underlying KV storage layer. the underlying KV engine currently supports levelDB, badgerDB, IPFS and OSS, and the main data storage includes two ways:&lt;/p></description></item><item><title>Protocol</title><link>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-pubsub/architecture/protocol/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-pubsub/architecture/protocol/</guid><description>&lt;h1 id="protocol-details">
 Protocol Details
 &lt;a class="anchor" href="#protocol-details">#&lt;/a>
&lt;/h1></description></item><item><title>Protocol</title><link>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-redis-proxy/architecture/protocol/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-redis-proxy/architecture/protocol/</guid><description>&lt;h1 id="protocol-details">
 Protocol Details
 &lt;a class="anchor" href="#protocol-details">#&lt;/a>
&lt;/h1></description></item><item><title>Protocol</title><link>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-sqlite/architecture/protocol/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-sqlite/architecture/protocol/</guid><description>&lt;h1 id="protocol-details">
 Protocol Details
 &lt;a class="anchor" href="#protocol-details">#&lt;/a>
&lt;/h1></description></item><item><title>Protocol</title><link>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-sqlproxy/architecture/protocol/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-sqlproxy/architecture/protocol/</guid><description>&lt;h1 id="protocol-details">
 Protocol Details
 &lt;a class="anchor" href="#protocol-details">#&lt;/a>
&lt;/h1></description></item><item><title>Protocol layer</title><link>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/designs/protocol/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/designs/protocol/</guid><description>&lt;h1 id="protocol-layer-design">
 Protocol layer design
 &lt;a class="anchor" href="#protocol-layer-design">#&lt;/a>
&lt;/h1>
&lt;p>A good access method of the application can accelerate the growth of the application ecology, and a good protocol design can reduce the transformation cost of the stock application, so the protocol layer is an important component of the IceFireDB software stack. The communication protocol of IceFireDB-NoSQL fully integrates the Redis RESP protocol, which mainly includes the following two parts of the protocol:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Data control protocol&lt;/strong>: Complete support for RESP clients, supporting functional requirements for database data access.&lt;/p></description></item><item><title>redhub-frame</title><link>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/develop/redhub/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/develop/redhub/</guid><description>&lt;h1 id="redhub-frame">
 redhub-frame
 &lt;a class="anchor" href="#redhub-frame">#&lt;/a>
&lt;/h1>
&lt;h2 id="project-introduction">
 Project introduction
 &lt;a class="anchor" href="#project-introduction">#&lt;/a>
&lt;/h2>
&lt;p>High-performance Redis-Server multi-threaded framework, based on RawEpoll model.&lt;/p>
&lt;h2 id="features">
 Features
 &lt;a class="anchor" href="#features">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Ultra high performance&lt;/li>
&lt;li>Fully multi-threaded support&lt;/li>
&lt;li>Low CPU resource consumption&lt;/li>
&lt;li>Compatible with redis protocol&lt;/li>
&lt;li>Create a Redis compatible server with RawEpoll model in Go&lt;/li>
&lt;/ul>
&lt;h2 id="installing">
 Installing
 &lt;a class="anchor" href="#installing">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">get&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">u&lt;/span> &lt;span style="color:#a6e22e">github&lt;/span>.&lt;span style="color:#a6e22e">com&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">IceFireDB&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">redhub&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="example">
 Example
 &lt;a class="anchor" href="#example">#&lt;/a>
&lt;/h2>
&lt;p>Here is a simple framework usage example,support the following redis commands:&lt;/p>
&lt;ul>
&lt;li>SET key value&lt;/li>
&lt;li>GET key&lt;/li>
&lt;li>DEL key&lt;/li>
&lt;li>PING&lt;/li>
&lt;li>QUIT&lt;/li>
&lt;/ul>
&lt;p>You can run this example in terminal:&lt;/p></description></item><item><title>Codec</title><link>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-sqlite/architecture/codec/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-sqlite/architecture/codec/</guid><description>&lt;h1 id="codec-engine-details">
 Codec Engine Details
 &lt;a class="anchor" href="#codec-engine-details">#&lt;/a>
&lt;/h1></description></item><item><title>Codec layer</title><link>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/designs/codec/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/designs/codec/</guid><description>&lt;h1 id="codec-layer-design">
 Codec layer design
 &lt;a class="anchor" href="#codec-layer-design">#&lt;/a>
&lt;/h1>
&lt;p>The codec layer is the glue of the IceFireDB data expression layer, because the bottom layer of IceFireDB supports many storage engines, including centralized storage such as web2 disk, OSS, leveldb, and badger, as well as web3&amp;rsquo;s IPFS, crdt-kv, and IPFS-LOG For this kind of decentralized storage, the storage interface provided by any kind of storage is simple and not standardized. The codec layer of IceFireDB-NoSQL is abstracted through a unified driver layer, and by encoding and decoding many instruction semantics into a KV model, a richer data expression layer is built to support more data scenarios, such as Strings\Hashs\Sets\Lists \Sorted Sets.&lt;/p></description></item><item><title>Configuration Guide</title><link>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/deploy/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/deploy/configuration/</guid><description>&lt;h1 id="icefiredb-configuration-guide">
 IceFireDB Configuration Guide
 &lt;a class="anchor" href="#icefiredb-configuration-guide">#&lt;/a>
&lt;/h1>
&lt;h2 id="overview">
 Overview
 &lt;a class="anchor" href="#overview">#&lt;/a>
&lt;/h2>
&lt;p>IceFireDB NoSQL component uses command-line flags for configuration instead of YAML configuration files. This guide covers all available command-line options for the NoSQL component.&lt;/p>
&lt;h2 id="command-line-interface">
 Command-Line Interface
 &lt;a class="anchor" href="#command-line-interface">#&lt;/a>
&lt;/h2>
&lt;p>The IceFireDB NoSQL component is configured using command-line flags. Here&amp;rsquo;s the basic usage:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Basic usage&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./icefiredb-nosql &lt;span style="color:#f92672">[&lt;/span>options&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Example with common flags&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./icefiredb-nosql &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -storage-backend leveldb &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -n &lt;span style="color:#ae81ff">11001&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -a 0.0.0.0 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -j ./data &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --openreads
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="command-line-options">
 Command-Line Options
 &lt;a class="anchor" href="#command-line-options">#&lt;/a>
&lt;/h2>
&lt;h3 id="network-configuration">
 Network Configuration
 &lt;a class="anchor" href="#network-configuration">#&lt;/a>
&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">Flag&lt;/th>
 &lt;th style="text-align: left">Description&lt;/th>
 &lt;th style="text-align: left">Default&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">&lt;code>-n&lt;/code>, &lt;code>--port&lt;/code>&lt;/td>
 &lt;td style="text-align: left">Port to listen on&lt;/td>
 &lt;td style="text-align: left">&lt;code>11001&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">&lt;code>-a&lt;/code>, &lt;code>--address&lt;/code>&lt;/td>
 &lt;td style="text-align: left">IP address to bind to&lt;/td>
 &lt;td style="text-align: left">&lt;code>&amp;quot;0.0.0.0&amp;quot;&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">&lt;code>--max-connections&lt;/code>&lt;/td>
 &lt;td style="text-align: left">Maximum client connections&lt;/td>
 &lt;td style="text-align: left">&lt;code>10000&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">&lt;code>--timeout&lt;/code>&lt;/td>
 &lt;td style="text-align: left">Connection timeout (seconds)&lt;/td>
 &lt;td style="text-align: left">&lt;code>30&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h3 id="storage-configuration">
 Storage Configuration
 &lt;a class="anchor" href="#storage-configuration">#&lt;/a>
&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">Flag&lt;/th>
 &lt;th style="text-align: left">Description&lt;/th>
 &lt;th style="text-align: left">Default&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">&lt;code>-storage-backend&lt;/code>&lt;/td>
 &lt;td style="text-align: left">Storage backend driver&lt;/td>
 &lt;td style="text-align: left">&lt;code>&amp;quot;leveldb&amp;quot;&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">&lt;code>-j&lt;/code>, &lt;code>--data-dir&lt;/code>&lt;/td>
 &lt;td style="text-align: left">Data directory path&lt;/td>
 &lt;td style="text-align: left">&lt;code>&amp;quot;./data&amp;quot;&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">&lt;code>--compression&lt;/code>&lt;/td>
 &lt;td style="text-align: left">Enable compression&lt;/td>
 &lt;td style="text-align: left">&lt;code>true&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">&lt;code>--cache-size&lt;/code>&lt;/td>
 &lt;td style="text-align: left">Cache size (MB)&lt;/td>
 &lt;td style="text-align: left">&lt;code>1024&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h4 id="supported-storage-drivers">
 Supported Storage Drivers
 &lt;a class="anchor" href="#supported-storage-drivers">#&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>&lt;code>leveldb&lt;/code> - Google LevelDB (default)&lt;/li>
&lt;li>&lt;code>badger&lt;/code> - Dgraph BadgerDB&lt;/li>
&lt;li>&lt;code>ipfs&lt;/code> - IPFS decentralized storage&lt;/li>
&lt;li>&lt;code>crdt&lt;/code> - CRDT-based storage&lt;/li>
&lt;li>&lt;code>ipfs-log&lt;/code> - IPFS append-only log&lt;/li>
&lt;li>&lt;code>oss&lt;/code> - Object storage service&lt;/li>
&lt;li>&lt;code>hybriddb&lt;/code> - Tiered hot/cold storage&lt;/li>
&lt;/ul>
&lt;h3 id="p2p-network-configuration">
 P2P Network Configuration
 &lt;a class="anchor" href="#p2p-network-configuration">#&lt;/a>
&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">Flag&lt;/th>
 &lt;th style="text-align: left">Description&lt;/th>
 &lt;th style="text-align: left">Default&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">&lt;code>--p2p-enable&lt;/code>&lt;/td>
 &lt;td style="text-align: left">Enable P2P networking&lt;/td>
 &lt;td style="text-align: left">&lt;code>false&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">&lt;code>--discovery-id&lt;/code>&lt;/td>
 &lt;td style="text-align: left">Network discovery ID&lt;/td>
 &lt;td style="text-align: left">&lt;code>&amp;quot;icefiredb_cluster&amp;quot;&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">&lt;code>--bootstrap-peers&lt;/code>&lt;/td>
 &lt;td style="text-align: left">Bootstrap peer addresses&lt;/td>
 &lt;td style="text-align: left">&lt;code>[]&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">&lt;code>--p2p-listen&lt;/code>&lt;/td>
 &lt;td style="text-align: left">P2P listen address&lt;/td>
 &lt;td style="text-align: left">&lt;code>&amp;quot;/ip4/0.0.0.0/tcp/4001&amp;quot;&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h3 id="logging-configuration">
 Logging Configuration
 &lt;a class="anchor" href="#logging-configuration">#&lt;/a>
&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">Flag&lt;/th>
 &lt;th style="text-align: left">Description&lt;/th>
 &lt;th style="text-align: left">Default&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">&lt;code>--log-level&lt;/code>&lt;/td>
 &lt;td style="text-align: left">Log level (debug, info, warn, error)&lt;/td>
 &lt;td style="text-align: left">&lt;code>&amp;quot;info&amp;quot;&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">&lt;code>--log-output&lt;/code>&lt;/td>
 &lt;td style="text-align: left">Output destination (stdout, file)&lt;/td>
 &lt;td style="text-align: left">&lt;code>&amp;quot;stdout&amp;quot;&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">&lt;code>--log-file&lt;/code>&lt;/td>
 &lt;td style="text-align: left">Log file path (if output=file)&lt;/td>
 &lt;td style="text-align: left">&lt;code>&amp;quot;./icefiredb.log&amp;quot;&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">&lt;code>--log-max-size&lt;/code>&lt;/td>
 &lt;td style="text-align: left">Max log file size (MB)&lt;/td>
 &lt;td style="text-align: left">&lt;code>100&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">&lt;code>--log-max-backups&lt;/code>&lt;/td>
 &lt;td style="text-align: left">Max backup files&lt;/td>
 &lt;td style="text-align: left">&lt;code>7&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="advanced-configuration-options">
 Advanced Configuration Options
 &lt;a class="anchor" href="#advanced-configuration-options">#&lt;/a>
&lt;/h2>
&lt;h3 id="performance-tuning">
 Performance Tuning
 &lt;a class="anchor" href="#performance-tuning">#&lt;/a>
&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">Flag&lt;/th>
 &lt;th style="text-align: left">Description&lt;/th>
 &lt;th style="text-align: left">Default&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">&lt;code>--max-memory&lt;/code>&lt;/td>
 &lt;td style="text-align: left">Maximum memory usage (bytes)&lt;/td>
 &lt;td style="text-align: left">&lt;code>1073741824&lt;/code> (1GB)&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">&lt;code>--cache-size&lt;/code>&lt;/td>
 &lt;td style="text-align: left">Cache size (MB)&lt;/td>
 &lt;td style="text-align: left">&lt;code>1024&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">&lt;code>--max-clients&lt;/code>&lt;/td>
 &lt;td style="text-align: left">Maximum client connections&lt;/td>
 &lt;td style="text-align: left">&lt;code>10000&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">&lt;code>--openreads&lt;/code>&lt;/td>
 &lt;td style="text-align: left">Enable open reads optimization&lt;/td>
 &lt;td style="text-align: left">&lt;code>false&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h3 id="security-configuration">
 Security Configuration
 &lt;a class="anchor" href="#security-configuration">#&lt;/a>
&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">Flag&lt;/th>
 &lt;th style="text-align: left">Description&lt;/th>
 &lt;th style="text-align: left">Default&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">&lt;code>--tls-enable&lt;/code>&lt;/td>
 &lt;td style="text-align: left">Enable TLS encryption&lt;/td>
 &lt;td style="text-align: left">&lt;code>false&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">&lt;code>--tls-cert&lt;/code>&lt;/td>
 &lt;td style="text-align: left">TLS certificate file&lt;/td>
 &lt;td style="text-align: left">&lt;code>&amp;quot;./certs/server.crt&amp;quot;&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">&lt;code>--tls-key&lt;/code>&lt;/td>
 &lt;td style="text-align: left">TLS private key file&lt;/td>
 &lt;td style="text-align: left">&lt;code>&amp;quot;./certs/server.key&amp;quot;&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">&lt;code>--auth-password&lt;/code>&lt;/td>
 &lt;td style="text-align: left">Authentication password&lt;/td>
 &lt;td style="text-align: left">&lt;code>&amp;quot;&amp;quot;&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">&lt;code>--ip-whitelist&lt;/code>&lt;/td>
 &lt;td style="text-align: left">IP whitelist (comma-separated)&lt;/td>
 &lt;td style="text-align: left">&lt;code>&amp;quot;&amp;quot;&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="usage-examples">
 Usage Examples
 &lt;a class="anchor" href="#usage-examples">#&lt;/a>
&lt;/h2>
&lt;h3 id="basic-deployment">
 Basic Deployment
 &lt;a class="anchor" href="#basic-deployment">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Start with default settings&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./icefiredb-nosql
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Start on specific port and address&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./icefiredb-nosql -n &lt;span style="color:#ae81ff">12000&lt;/span> -a 127.0.0.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Use BadgerDB storage backend&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./icefiredb-nosql -storage-backend badger -j ./badger_data
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Enable P2P networking&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./icefiredb-nosql --p2p-enable --discovery-id &lt;span style="color:#e6db74">&amp;#34;my_cluster&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="production-deployment">
 Production Deployment
 &lt;a class="anchor" href="#production-deployment">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>./icefiredb-nosql &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -storage-backend badger &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -n &lt;span style="color:#ae81ff">11001&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -a 0.0.0.0 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -j /var/lib/icefiredb &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --log-level warn &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --log-file /var/log/icefiredb.log &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --max-memory &lt;span style="color:#ae81ff">4294967296&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --cache-size &lt;span style="color:#ae81ff">2048&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --openreads
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="decentralized-deployment">
 Decentralized Deployment
 &lt;a class="anchor" href="#decentralized-deployment">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>./icefiredb-nosql &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -storage-backend ipfs &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -n &lt;span style="color:#ae81ff">11001&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -j ./ipfs_data &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --p2p-enable &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --discovery-id &lt;span style="color:#e6db74">&amp;#34;decentralized_cluster&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --bootstrap-peers &lt;span style="color:#e6db74">&amp;#34;/ip4/192.168.1.100/tcp/4001/p2p/QmPeer1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="environment-variables">
 Environment Variables
 &lt;a class="anchor" href="#environment-variables">#&lt;/a>
&lt;/h2>
&lt;p>IceFireDB NoSQL also supports configuration through environment variables:&lt;/p></description></item><item><title>API Reference</title><link>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/develop/api-reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/develop/api-reference/</guid><description>&lt;h1 id="icefiredb-nosql-api-reference">
 IceFireDB NoSQL API Reference
 &lt;a class="anchor" href="#icefiredb-nosql-api-reference">#&lt;/a>
&lt;/h1>
&lt;h2 id="overview">
 Overview
 &lt;a class="anchor" href="#overview">#&lt;/a>
&lt;/h2>
&lt;p>IceFireDB provides a Redis-compatible API with additional commands for decentralized operations. This document covers the supported commands, their syntax, and usage examples.&lt;/p>
&lt;h2 id="command-categories">
 Command Categories
 &lt;a class="anchor" href="#command-categories">#&lt;/a>
&lt;/h2>
&lt;h3 id="server-management-commands">
 Server Management Commands
 &lt;a class="anchor" href="#server-management-commands">#&lt;/a>
&lt;/h3>
&lt;h4 id="info">
 &lt;code>INFO&lt;/code>
 &lt;a class="anchor" href="#info">#&lt;/a>
&lt;/h4>
&lt;p>Returns server information and statistics.&lt;/p>
&lt;p>&lt;strong>Syntax:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-redis" data-lang="redis">INFO [section]
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Example:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-redis" data-lang="redis">INFO
INFO memory
INFO replication
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Response:&lt;/strong>
Returns a multi-bulk string with server information.&lt;/p>
&lt;h4 id="flushall">
 &lt;code>FLUSHALL&lt;/code>
 &lt;a class="anchor" href="#flushall">#&lt;/a>
&lt;/h4>
&lt;p>Removes all keys from all databases.&lt;/p></description></item><item><title>Performance Benchmarking</title><link>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/tutorials/performance-benchmarking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/tutorials/performance-benchmarking/</guid><description>&lt;h1 id="performance-benchmarking-guide">
 Performance Benchmarking Guide
 &lt;a class="anchor" href="#performance-benchmarking-guide">#&lt;/a>
&lt;/h1>
&lt;h2 id="overview">
 Overview
 &lt;a class="anchor" href="#overview">#&lt;/a>
&lt;/h2>
&lt;p>This guide covers performance testing and benchmarking methodologies for IceFireDB. Learn how to measure, analyze, and optimize IceFireDB performance for different workloads and storage drivers.&lt;/p>
&lt;h2 id="benchmarking-tools">
 Benchmarking Tools
 &lt;a class="anchor" href="#benchmarking-tools">#&lt;/a>
&lt;/h2>
&lt;h3 id="redis-benchmark-recommended">
 redis-benchmark (Recommended)
 &lt;a class="anchor" href="#redis-benchmark-recommended">#&lt;/a>
&lt;/h3>
&lt;p>The standard Redis benchmarking tool works perfectly with IceFireDB:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Basic benchmark&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>redis-benchmark -h localhost -p &lt;span style="color:#ae81ff">11001&lt;/span> -t set,get -c &lt;span style="color:#ae81ff">50&lt;/span> -n &lt;span style="color:#ae81ff">100000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Comprehensive test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>redis-benchmark -h localhost -p &lt;span style="color:#ae81ff">11001&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -t set,get,incr,lpush,lpop,sadd,spop,lpush,lrange &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -c &lt;span style="color:#ae81ff">100&lt;/span> -n &lt;span style="color:#ae81ff">1000000&lt;/span> -P &lt;span style="color:#ae81ff">16&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Specific command testing&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>redis-benchmark -h localhost -p &lt;span style="color:#ae81ff">11001&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -t set -c &lt;span style="color:#ae81ff">50&lt;/span> -n &lt;span style="color:#ae81ff">500000&lt;/span> --csv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Pipeline testing&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>redis-benchmark -h localhost -p &lt;span style="color:#ae81ff">11001&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -t set,get -c &lt;span style="color:#ae81ff">100&lt;/span> -n &lt;span style="color:#ae81ff">1000000&lt;/span> -P &lt;span style="color:#ae81ff">100&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="memtier_benchmark">
 memtier_benchmark
 &lt;a class="anchor" href="#memtier_benchmark">#&lt;/a>
&lt;/h3>
&lt;p>For more advanced benchmarking:&lt;/p></description></item><item><title>Storage Drivers</title><link>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/designs/storage-drivers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/designs/storage-drivers/</guid><description>&lt;h1 id="icefiredb-storage-drivers">
 IceFireDB Storage Drivers
 &lt;a class="anchor" href="#icefiredb-storage-drivers">#&lt;/a>
&lt;/h1>
&lt;h2 id="overview">
 Overview
 &lt;a class="anchor" href="#overview">#&lt;/a>
&lt;/h2>
&lt;p>IceFireDB supports multiple storage backends through a unified driver interface. This allows you to choose the best storage engine for your specific use case, whether you need high-performance local storage or decentralized distributed storage.&lt;/p>
&lt;p>&lt;strong>Note&lt;/strong>: Currently, IceFireDB NoSQL uses command-line flags for configuration rather than YAML configuration files. All storage driver configuration is done through runtime flags.&lt;/p>
&lt;h2 id="driver-architecture">
 Driver Architecture
 &lt;a class="anchor" href="#driver-architecture">#&lt;/a>
&lt;/h2>
&lt;p>All storage drivers implement the same interface:&lt;/p></description></item></channel></rss>