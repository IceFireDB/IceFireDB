<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>IceFireDB - Building global database infrastructure on IceFireDB Documentation</title><link>https://www.icefiredb.xyz/icefiredb_docs/</link><description>Recent content in IceFireDB - Building global database infrastructure on IceFireDB Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://www.icefiredb.xyz/icefiredb_docs/index.xml" rel="self" type="application/rss+xml"/><item><title>icefiredb-crdt-kv</title><link>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/develop/icefiredb-crdt-kv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/develop/icefiredb-crdt-kv/</guid><description>icefiredb-crdt-kv # Project introduction # The IceFireDB-CRDT-KV engine can support decentralized P2P networking, data synchronization and consistency between nodes. It is a component of the IceFireDB software ecosystem, thanks to the open source of IPFS.
Features # Easy access to P2P data consistency function Stable decentralized networking function Friendly program access interface Installing # go get -u github.com/IceFireDB/icefiredb-crdt-kv Example # package main import ( &amp;#34;bufio&amp;#34; &amp;#34;context&amp;#34; &amp;#34;fmt&amp;#34; icefiredb_crdt_kv &amp;#34;github.com/IceFireDB/icefiredb-crdt-kv/kv&amp;#34; badger2 &amp;#34;github.</description></item><item><title>OrbitDB</title><link>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/project-comparison/orbitdb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/project-comparison/orbitdb/</guid><description>Compared with OrbitDB # OrbitDB is a serverless, distributed, peer-to-peer database.
OrbitDB uses IPFS as its data storage and IPFS Pubsub and uses CRDTs to automatically sync databases with peers, achieving strong eventual consistency - when all updates are eventually received, all nodes will have the same state.
IceFireDB is a database built for web3 and web2,The core mission of the project is to help applications quickly achieve decentralization,built for Data dao.</description></item><item><title>OverView</title><link>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/designs/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/designs/overview/</guid><description> OverView #</description></item><item><title>OverView</title><link>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-pubsub/architecture/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-pubsub/architecture/overview/</guid><description> OverView #</description></item><item><title>OverView</title><link>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-redis-proxy/architecture/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-redis-proxy/architecture/overview/</guid><description> OverView #</description></item><item><title>OverView</title><link>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-sqlite/architecture/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-sqlite/architecture/overview/</guid><description> OverView #</description></item><item><title>OverView</title><link>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-sqlproxy/architecture/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-sqlproxy/architecture/overview/</guid><description> OverView #</description></item><item><title>icefiredb-ipfs-log</title><link>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/develop/icefiredb-ipfs-log/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/develop/icefiredb-ipfs-log/</guid><description>icefiredb-ipfs-log # Project introduction # icefiredb-ipfs-log is a distributed immutable, operation-based conflict-free replication data structure that relies on ipfs to store data and merges each peer node data based on pubsub conflict-free. You can easily implement custom data structures such as kv, event, nosql, etc. based on icefiredb-ipfs-log.
Conflict-free log replication model
Log A Log B | | logA.append(&amp;#34;one&amp;#34;) logB.append(&amp;#34;hello&amp;#34;) | | v v +-----+ +-------+ |&amp;#34;one&amp;#34;| |&amp;#34;hello&amp;#34;| +-----+ +-------+ | | logA.</description></item><item><title>NetWork</title><link>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-pubsub/architecture/network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-pubsub/architecture/network/</guid><description> NetWork Details #</description></item><item><title>NetWork</title><link>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-redis-proxy/architecture/network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-redis-proxy/architecture/network/</guid><description> NetWork Details #</description></item><item><title>NetWork</title><link>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-sqlite/architecture/network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-sqlite/architecture/network/</guid><description> NetWork Details #</description></item><item><title>NetWork</title><link>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-sqlproxy/architecture/network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-sqlproxy/architecture/network/</guid><description> NetWork Details #</description></item><item><title>Network layer</title><link>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/designs/network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/designs/network/</guid><description>Network layer design # The network layer undertakes the work of inter-node networking, inter-node data distribution, and inter-node data consistency consensus. The network layer of IceFireDB is divided into two layers according to the distance of the physical network link:
Data consistency network layer for short-distance networks. Decentralized database network layer for wide-distance network. The above two different network layers are supported by different technologies and have different requirements for data consistency sensitivity and timeliness.</description></item><item><title>ThreadDB</title><link>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/project-comparison/threaddb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/project-comparison/threaddb/</guid><description>Compared with ThreadDB # ThreadDB is a serverless, distributed, peer-to-peer database.
IceFireDB is a database built for web3 and web2,The core mission of the project is to help applications quickly achieve decentralization,built for Data dao.
Database ThreadDB IceFireDB system target P2P Databases A decentralized database platform built for Data dao. storage engine support IPFS goleveldb、badger、IPFS、CRDT、IPFS-LOG、OSS network support type P2P P2P、RAFT、NATS Data type support SQL KV、Strings、Hashes、Lists、Sorted Sets、Sets、SQL、PubSub Software integration method Binary software integration Software library integration, binary software integration、web3 platform integration web3 support No smart contract plan Smart contracts are being supported、Build data dao database platform computer language used to implement Go Go Ecological client language Go Any client that supports the redis、mysql protocol Thanks ThreadDB # Thanks to ThreadDB for letting us see the excellent implementation of decentralized SQL database.</description></item><item><title>icefiredb-proxy</title><link>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/develop/icefiredb_proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/develop/icefiredb_proxy/</guid><description>IceFireDB-Proxy # Project introduction # IceFireDB-Proxy is a high-performance, high-availability, and user-friendly Resp protocol cluster proxy solution. It is supporting P2P networking and is a network component in the IceFireDB ecosystem.
Features # Complete data source mode support: stand-alone, cluster mode Rich command support Excellent cluster state management and failover Excellent traffic control policies: Traffic read/write separation and multi-tenant data isolation Excellent command telemetry features Bottom-fishing use of mind and base abilities that are closer to cloud native Supports P2P automatic networking, and Proxy helps traditional Redis databases achieve data decentralization.</description></item><item><title>Storage</title><link>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-pubsub/architecture/storage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-pubsub/architecture/storage/</guid><description> Storage Engine Details #</description></item><item><title>Storage</title><link>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-redis-proxy/architecture/storage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-redis-proxy/architecture/storage/</guid><description> Storage Engine Details #</description></item><item><title>Storage</title><link>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-sqlite/architecture/storage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-sqlite/architecture/storage/</guid><description> Storage Engine Details #</description></item><item><title>Storage</title><link>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-sqlproxy/architecture/storage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-sqlproxy/architecture/storage/</guid><description> Storage Engine Details #</description></item><item><title>Storage layer</title><link>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/designs/storage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/designs/storage/</guid><description>Storage layer design # The storage layer is responsible for data storage, and the data storage here includes different storage media of web2 and web3. For web2, the storage media we face includes disk, OSS, and for web3, the storage media we face includes IPFS, blockchain, and smart contracts.Currently, the storage types supported by IceFireDB mainly include the following.
Engine type describe Driver directory LevelDB LevelDB is a fast key-value storage library written at Google that provides an ordered mapping from string keys to string values.</description></item><item><title>Protocol</title><link>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-pubsub/architecture/protocol/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-pubsub/architecture/protocol/</guid><description> Protocol Details #</description></item><item><title>Protocol</title><link>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-redis-proxy/architecture/protocol/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-redis-proxy/architecture/protocol/</guid><description> Protocol Details #</description></item><item><title>Protocol</title><link>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-sqlite/architecture/protocol/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-sqlite/architecture/protocol/</guid><description> Protocol Details #</description></item><item><title>Protocol</title><link>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-sqlproxy/architecture/protocol/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-sqlproxy/architecture/protocol/</guid><description> Protocol Details #</description></item><item><title>Protocol layer</title><link>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/designs/protocol/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/designs/protocol/</guid><description>Protocol layer design # A good access method of the application can accelerate the growth of the application ecology, and a good protocol design can reduce the transformation cost of the stock application, so the protocol layer is an important component of the IceFireDB software stack. The communication protocol of IceFireDB-NoSQL fully integrates the Redis RESP protocol, which mainly includes the following two parts of the protocol:
Data control protocol: Complete support for RESP clients, supporting functional requirements for database data access.</description></item><item><title>redhub-frame</title><link>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/develop/redhub/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/develop/redhub/</guid><description>redhub-frame # Project introduction # High-performance Redis-Server multi-threaded framework, based on RawEpoll model.
Features # Ultra high performance Fully multi-threaded support Low CPU resource consumption Compatible with redis protocol Create a Redis compatible server with RawEpoll model in Go Installing # go get -u github.com/IceFireDB/redhub Example # Here is a simple framework usage example,support the following redis commands:
SET key value GET key DEL key PING QUIT You can run this example in terminal:</description></item><item><title>Codec</title><link>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-sqlite/architecture/codec/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-sqlite/architecture/codec/</guid><description> Codec Engine Details #</description></item><item><title>Codec layer</title><link>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/designs/codec/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.icefiredb.xyz/icefiredb_docs/icefiredb/icefiredb-nosql/designs/codec/</guid><description>Codec layer design # The codec layer is the glue of the IceFireDB data expression layer, because the bottom layer of IceFireDB supports many storage engines, including centralized storage such as web2 disk, OSS, leveldb, and badger, as well as web3&amp;rsquo;s IPFS, crdt-kv, and IPFS-LOG For this kind of decentralized storage, the storage interface provided by any kind of storage is simple and not standardized. The codec layer of IceFireDB-NoSQL is abstracted through a unified driver layer, and by encoding and decoding many instruction semantics into a KV model, a richer data expression layer is built to support more data scenarios, such as Strings\Hashs\Sets\Lists \Sorted Sets.</description></item></channel></rss>