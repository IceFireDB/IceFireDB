// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.2
// source: p2p/security/noise/pb/payload.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NoiseExtensions struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	WebtransportCerthashes [][]byte               `protobuf:"bytes,1,rep,name=webtransport_certhashes,json=webtransportCerthashes" json:"webtransport_certhashes,omitempty"`
	StreamMuxers           []string               `protobuf:"bytes,2,rep,name=stream_muxers,json=streamMuxers" json:"stream_muxers,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *NoiseExtensions) Reset() {
	*x = NoiseExtensions{}
	mi := &file_p2p_security_noise_pb_payload_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NoiseExtensions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoiseExtensions) ProtoMessage() {}

func (x *NoiseExtensions) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_security_noise_pb_payload_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoiseExtensions.ProtoReflect.Descriptor instead.
func (*NoiseExtensions) Descriptor() ([]byte, []int) {
	return file_p2p_security_noise_pb_payload_proto_rawDescGZIP(), []int{0}
}

func (x *NoiseExtensions) GetWebtransportCerthashes() [][]byte {
	if x != nil {
		return x.WebtransportCerthashes
	}
	return nil
}

func (x *NoiseExtensions) GetStreamMuxers() []string {
	if x != nil {
		return x.StreamMuxers
	}
	return nil
}

type NoiseHandshakePayload struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IdentityKey   []byte                 `protobuf:"bytes,1,opt,name=identity_key,json=identityKey" json:"identity_key,omitempty"`
	IdentitySig   []byte                 `protobuf:"bytes,2,opt,name=identity_sig,json=identitySig" json:"identity_sig,omitempty"`
	Extensions    *NoiseExtensions       `protobuf:"bytes,4,opt,name=extensions" json:"extensions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NoiseHandshakePayload) Reset() {
	*x = NoiseHandshakePayload{}
	mi := &file_p2p_security_noise_pb_payload_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NoiseHandshakePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoiseHandshakePayload) ProtoMessage() {}

func (x *NoiseHandshakePayload) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_security_noise_pb_payload_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoiseHandshakePayload.ProtoReflect.Descriptor instead.
func (*NoiseHandshakePayload) Descriptor() ([]byte, []int) {
	return file_p2p_security_noise_pb_payload_proto_rawDescGZIP(), []int{1}
}

func (x *NoiseHandshakePayload) GetIdentityKey() []byte {
	if x != nil {
		return x.IdentityKey
	}
	return nil
}

func (x *NoiseHandshakePayload) GetIdentitySig() []byte {
	if x != nil {
		return x.IdentitySig
	}
	return nil
}

func (x *NoiseHandshakePayload) GetExtensions() *NoiseExtensions {
	if x != nil {
		return x.Extensions
	}
	return nil
}

var File_p2p_security_noise_pb_payload_proto protoreflect.FileDescriptor

const file_p2p_security_noise_pb_payload_proto_rawDesc = "" +
	"\n" +
	"#p2p/security/noise/pb/payload.proto\x12\x02pb\"o\n" +
	"\x0fNoiseExtensions\x127\n" +
	"\x17webtransport_certhashes\x18\x01 \x03(\fR\x16webtransportCerthashes\x12#\n" +
	"\rstream_muxers\x18\x02 \x03(\tR\fstreamMuxers\"\x92\x01\n" +
	"\x15NoiseHandshakePayload\x12!\n" +
	"\fidentity_key\x18\x01 \x01(\fR\videntityKey\x12!\n" +
	"\fidentity_sig\x18\x02 \x01(\fR\videntitySig\x123\n" +
	"\n" +
	"extensions\x18\x04 \x01(\v2\x13.pb.NoiseExtensionsR\n" +
	"extensionsB3Z1github.com/libp2p/go-libp2p/p2p/security/noise/pb"

var (
	file_p2p_security_noise_pb_payload_proto_rawDescOnce sync.Once
	file_p2p_security_noise_pb_payload_proto_rawDescData []byte
)

func file_p2p_security_noise_pb_payload_proto_rawDescGZIP() []byte {
	file_p2p_security_noise_pb_payload_proto_rawDescOnce.Do(func() {
		file_p2p_security_noise_pb_payload_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_p2p_security_noise_pb_payload_proto_rawDesc), len(file_p2p_security_noise_pb_payload_proto_rawDesc)))
	})
	return file_p2p_security_noise_pb_payload_proto_rawDescData
}

var file_p2p_security_noise_pb_payload_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_p2p_security_noise_pb_payload_proto_goTypes = []any{
	(*NoiseExtensions)(nil),       // 0: pb.NoiseExtensions
	(*NoiseHandshakePayload)(nil), // 1: pb.NoiseHandshakePayload
}
var file_p2p_security_noise_pb_payload_proto_depIdxs = []int32{
	0, // 0: pb.NoiseHandshakePayload.extensions:type_name -> pb.NoiseExtensions
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_p2p_security_noise_pb_payload_proto_init() }
func file_p2p_security_noise_pb_payload_proto_init() {
	if File_p2p_security_noise_pb_payload_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_p2p_security_noise_pb_payload_proto_rawDesc), len(file_p2p_security_noise_pb_payload_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_p2p_security_noise_pb_payload_proto_goTypes,
		DependencyIndexes: file_p2p_security_noise_pb_payload_proto_depIdxs,
		MessageInfos:      file_p2p_security_noise_pb_payload_proto_msgTypes,
	}.Build()
	File_p2p_security_noise_pb_payload_proto = out.File
	file_p2p_security_noise_pb_payload_proto_goTypes = nil
	file_p2p_security_noise_pb_payload_proto_depIdxs = nil
}
