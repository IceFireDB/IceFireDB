// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.2
// source: core/peer/pb/peer_record.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PeerRecord messages contain information that is useful to share with other peers.
// Currently, a PeerRecord contains the public listen addresses for a peer, but this
// is expected to expand to include other information in the future.
//
// PeerRecords are designed to be serialized to bytes and placed inside of
// SignedEnvelopes before sharing with other peers.
// See https://github.com/libp2p/go-libp2p/blob/master/core/record/pb/envelope.proto for
// the SignedEnvelope definition.
type PeerRecord struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// peer_id contains a libp2p peer id in its binary representation.
	PeerId []byte `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	// seq contains a monotonically-increasing sequence counter to order PeerRecords in time.
	Seq uint64 `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
	// addresses is a list of public listen addresses for the peer.
	Addresses     []*PeerRecord_AddressInfo `protobuf:"bytes,3,rep,name=addresses,proto3" json:"addresses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PeerRecord) Reset() {
	*x = PeerRecord{}
	mi := &file_core_peer_pb_peer_record_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeerRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerRecord) ProtoMessage() {}

func (x *PeerRecord) ProtoReflect() protoreflect.Message {
	mi := &file_core_peer_pb_peer_record_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerRecord.ProtoReflect.Descriptor instead.
func (*PeerRecord) Descriptor() ([]byte, []int) {
	return file_core_peer_pb_peer_record_proto_rawDescGZIP(), []int{0}
}

func (x *PeerRecord) GetPeerId() []byte {
	if x != nil {
		return x.PeerId
	}
	return nil
}

func (x *PeerRecord) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *PeerRecord) GetAddresses() []*PeerRecord_AddressInfo {
	if x != nil {
		return x.Addresses
	}
	return nil
}

// AddressInfo is a wrapper around a binary multiaddr. It is defined as a
// separate message to allow us to add per-address metadata in the future.
type PeerRecord_AddressInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Multiaddr     []byte                 `protobuf:"bytes,1,opt,name=multiaddr,proto3" json:"multiaddr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PeerRecord_AddressInfo) Reset() {
	*x = PeerRecord_AddressInfo{}
	mi := &file_core_peer_pb_peer_record_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeerRecord_AddressInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerRecord_AddressInfo) ProtoMessage() {}

func (x *PeerRecord_AddressInfo) ProtoReflect() protoreflect.Message {
	mi := &file_core_peer_pb_peer_record_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerRecord_AddressInfo.ProtoReflect.Descriptor instead.
func (*PeerRecord_AddressInfo) Descriptor() ([]byte, []int) {
	return file_core_peer_pb_peer_record_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PeerRecord_AddressInfo) GetMultiaddr() []byte {
	if x != nil {
		return x.Multiaddr
	}
	return nil
}

var File_core_peer_pb_peer_record_proto protoreflect.FileDescriptor

const file_core_peer_pb_peer_record_proto_rawDesc = "" +
	"\n" +
	"\x1ecore/peer/pb/peer_record.proto\x12\apeer.pb\"\xa3\x01\n" +
	"\n" +
	"PeerRecord\x12\x17\n" +
	"\apeer_id\x18\x01 \x01(\fR\x06peerId\x12\x10\n" +
	"\x03seq\x18\x02 \x01(\x04R\x03seq\x12=\n" +
	"\taddresses\x18\x03 \x03(\v2\x1f.peer.pb.PeerRecord.AddressInfoR\taddresses\x1a+\n" +
	"\vAddressInfo\x12\x1c\n" +
	"\tmultiaddr\x18\x01 \x01(\fR\tmultiaddrB*Z(github.com/libp2p/go-libp2p/core/peer/pbb\x06proto3"

var (
	file_core_peer_pb_peer_record_proto_rawDescOnce sync.Once
	file_core_peer_pb_peer_record_proto_rawDescData []byte
)

func file_core_peer_pb_peer_record_proto_rawDescGZIP() []byte {
	file_core_peer_pb_peer_record_proto_rawDescOnce.Do(func() {
		file_core_peer_pb_peer_record_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_core_peer_pb_peer_record_proto_rawDesc), len(file_core_peer_pb_peer_record_proto_rawDesc)))
	})
	return file_core_peer_pb_peer_record_proto_rawDescData
}

var file_core_peer_pb_peer_record_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_core_peer_pb_peer_record_proto_goTypes = []any{
	(*PeerRecord)(nil),             // 0: peer.pb.PeerRecord
	(*PeerRecord_AddressInfo)(nil), // 1: peer.pb.PeerRecord.AddressInfo
}
var file_core_peer_pb_peer_record_proto_depIdxs = []int32{
	1, // 0: peer.pb.PeerRecord.addresses:type_name -> peer.pb.PeerRecord.AddressInfo
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_core_peer_pb_peer_record_proto_init() }
func file_core_peer_pb_peer_record_proto_init() {
	if File_core_peer_pb_peer_record_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_core_peer_pb_peer_record_proto_rawDesc), len(file_core_peer_pb_peer_record_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_core_peer_pb_peer_record_proto_goTypes,
		DependencyIndexes: file_core_peer_pb_peer_record_proto_depIdxs,
		MessageInfos:      file_core_peer_pb_peer_record_proto_msgTypes,
	}.Build()
	File_core_peer_pb_peer_record_proto = out.File
	file_core_peer_pb_peer_record_proto_goTypes = nil
	file_core_peer_pb_peer_record_proto_depIdxs = nil
}
