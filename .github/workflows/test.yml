on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

name: Test
jobs:
  osstest:
    strategy:
      matrix:
        go-version: [1.19.x]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    env:
      DRIVER: oss
    steps:
      - name: start minlo
        run: docker run -p 9000:9000 -p 9001:9001 -e "MINIO_ROOT_USER=AKIAIOSFODNN7EXAMPLE" -e "MINIO_ROOT_PASSWORD=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY" -d quay.io/minio/minio server /data --console-address ":9001"
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Test
        run: go test -v --v -tags="alltest osstest"

#  hybriddbtest:
#    strategy:
#      matrix:
#        go-version: [ 1.17.x ]
#        os: [ ubuntu-latest, macos-latest, windows-latest ]
#    runs-on: ${{ matrix.os }}
#    env:
#      DRIVER: hybriddb
#    steps:
#      - name: Install Go
#        uses: actions/setup-go@v5
#        with:
#          go-version: ${{ matrix.go-version }}
#      - name: Checkout code
#        uses: actions/checkout@v4
#      - name: Test
#        run: go test -v --v -tags alltest

  ipfstest:
    strategy:
      matrix:
        go-version: [ 1.19.x ]
        os: [ ubuntu-latest]
    runs-on: ${{ matrix.os }}
    env:
      DRIVER: ipfs
    steps:
      - name: Setup Ipfs daemon 
        run: |
          sudo mkdir -p /root/ipfs_staging
          sudo mkdir -p /root/ipfs_data
          export ipfs_staging=/root/ipfs_staging
          export ipfs_data=/root/ipfs_data 
          docker run -d --name ipfs_host -v $ipfs_staging:/export -v $ipfs_data:/data/ipfs -p 4001:4001 -p 8080:8080 -p 5001:5001 ipfs/go-ipfs:latest
          
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Test
        run: go test -v --v -tags alltest

#  orbitdbtest:
#    strategy:
#      matrix:
#        go-version: [ 1.17.x ]
#        os: [ ubuntu-latest, macos-latest, windows-latest ]
#    runs-on: ${{ matrix.os }}
#    env:
#      DRIVER: orbitdb
#    steps:
#      - name: Install Go
#        uses: actions/setup-go@v5
#        with:
#          go-version: ${{ matrix.go-version }}
#      - name: Checkout code
#        uses: actions/checkout@v4
#      - name: Test
#        run: go test -v --v -tags alltest


  goleveldbtest:
    strategy:
      matrix:
        go-version: [ 1.19.x ]
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    env:
      DRIVER: goleveldb
    steps:
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Test
        run: go test -v --v -tags alltest

  crdtdbtest:
    strategy:
      matrix:
        go-version: [ 1.19.x ]
        os: [ ubuntu-latest, macos-latest ]
    runs-on: ${{ matrix.os }}
    env:
      DRIVER: crdt
    steps:
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Test
        run: go test -v --v -tags alltest

  ipfslogdbtest:
    strategy:
      matrix:
        go-version: [ 1.19.x ]
        os: [ ubuntu-latest, macos-latest ]
    runs-on: ${{ matrix.os }}
    env:
      DRIVER: ipfs-log
    steps:
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Test
        run: go test -v --v -tags alltest